# Generated by Django 5.0.6 on 2024-07-09 07:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "team_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("team_name", models.CharField(max_length=128, unique=True)),
                (
                    "team_logo",
                    models.ImageField(blank=True, null=True, upload_to="team_logos/"),
                ),
                ("created_by", models.CharField(blank=True, max_length=128, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=128, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("user_age", models.IntegerField(null=True)),
                ("is_player", models.BooleanField(default=False)),
                ("user_height", models.IntegerField(null=True)),
                ("user_primary_position", models.CharField(max_length=128)),
                ("subscribed", models.BooleanField(default=False)),
                ("created_by", models.CharField(blank=True, max_length=128, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=128, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user_image",
                    models.ImageField(blank=True, null=True, upload_to="images/"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "user_team",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="players",
                        to="football_app.team",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PlayerStats",
            fields=[
                (
                    "stat_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("current_team", models.CharField(max_length=128)),
                (
                    "previous_team",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "joined_team_at",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "left_team_at",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "season_played",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "match_half_played",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                ("start_match", models.BooleanField(default=False)),
                ("sub_in_at", models.CharField(blank=True, max_length=128, null=True)),
                ("sub_out_at", models.CharField(blank=True, max_length=128, null=True)),
                ("opposing_team", models.CharField(max_length=128)),
                ("match_type", models.CharField(max_length=128)),
                ("control_success", models.IntegerField(default=0)),
                ("control_fail", models.IntegerField(default=0)),
                ("short_pass_success", models.IntegerField(default=0)),
                ("short_pass_fail", models.IntegerField(default=0)),
                ("duel_success", models.IntegerField(default=0)),
                ("duel_fail", models.IntegerField(default=0)),
                ("long_pass_success", models.IntegerField(default=0)),
                ("long_pass_fail", models.IntegerField(default=0)),
                ("dribble_success", models.IntegerField(default=0)),
                ("dribble_fail", models.IntegerField(default=0)),
                ("cross_success", models.IntegerField(default=0)),
                ("cross_fail", models.IntegerField(default=0)),
                ("shoot_success", models.IntegerField(default=0)),
                ("shoot_fail", models.IntegerField(default=0)),
                ("interception_success", models.IntegerField(default=0)),
                ("interception_fail", models.IntegerField(default=0)),
                ("one_touch_pass_success", models.IntegerField(default=0)),
                ("one_touch_pass_fail", models.IntegerField(default=0)),
                ("call_of_ball_success", models.IntegerField(default=0)),
                ("call_of_ball_fail", models.IntegerField(default=0)),
                ("tackle_success", models.IntegerField(default=0)),
                ("tackle_fail", models.IntegerField(default=0)),
                ("clearance_success", models.IntegerField(default=0)),
                ("clearance_fail", models.IntegerField(default=0)),
                ("fouled_on", models.IntegerField(default=0)),
                ("foul_commited", models.IntegerField(default=0)),
                ("corner_success", models.IntegerField(default=0)),
                ("corner_fail", models.IntegerField(default=0)),
                ("free_kick_success", models.IntegerField(default=0)),
                ("free_kick_fail", models.IntegerField(default=0)),
                ("penalty_kick_success", models.IntegerField(default=0)),
                ("penalty_kick_fail", models.IntegerField(default=0)),
                ("yellow_card", models.IntegerField(default=0)),
                ("red_card", models.IntegerField(default=0)),
                ("goal_save", models.IntegerField(default=0)),
                ("goal_conceded", models.IntegerField(default=0)),
                ("penalty_save", models.IntegerField(default=0)),
                ("penalty_conceded", models.IntegerField(default=0)),
                ("offside", models.IntegerField(default=0)),
                ("goal_scored", models.IntegerField(default=0)),
                ("assists", models.IntegerField(default=0)),
                ("throw_in_success", models.IntegerField(default=0)),
                ("throw_in_fail", models.IntegerField(default=0)),
                ("created_by", models.CharField(blank=True, max_length=128, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=128, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_stats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeamStats",
            fields=[
                (
                    "team_stat_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("season", models.CharField(max_length=128)),
                ("number_of_goals", models.IntegerField(default=0)),
                ("number_of_wins", models.IntegerField(default=0)),
                ("number_of_loses", models.IntegerField(default=0)),
                ("number_of_matches_played", models.IntegerField(default=0)),
                ("possession", models.FloatField(blank=True, null=True)),
                ("total_number_of_passes", models.IntegerField(default=0)),
                ("created_by", models.CharField(blank=True, max_length=128, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=128, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "team_logo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_logo_stats",
                        to="football_app.team",
                    ),
                ),
                (
                    "team_name",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_stats",
                        to="football_app.team",
                    ),
                ),
            ],
        ),
    ]
